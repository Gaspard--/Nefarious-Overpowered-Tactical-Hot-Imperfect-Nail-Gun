# include "MapManager.hpp"
# include <cmath>

static constexpr size_t mapSize = 300;

MapManager::MapManager(claws::vect<float, 2> const &winSize)
  : winSize(winSize)
{
  initProcGenMap();
}

void MapManager::generateRoom(int xO, int yO, int size)
{
  if (xO + size >= mapSize || yO + size >= mapSize || xO < 1 || yO < 1)
    return ;
  for (int x = xO; x < xO + size; ++x)
    for (int y = yO; y < yO + size; ++y)
      if (mapTiles[x][y] != TileId::Wall)
	return ;
  for (int x = xO; x < xO + size; ++x)
    for (int y = yO; y < yO + size; ++y)
      mapTiles[x][y] = TileId::Empty;

  if (size > 8)
    {
      int plateformPos = yO + rand() % (size - 1);
      for (int x = xO + rand() % size - 4; x < mapSize; ++x)
	if (mapTiles[x][plateformPos] == TileId::Empty)
	  mapTiles[x][plateformPos] = TileId::UpClosedWall;
	else
	  goto end_plateform;
    end_plateform:
      ;      
    }
  
  generateRoom((rand() % size) - size / 2 + xO, yO + size, size + 1);
  generateRoom(xO + size, (rand() % size) - size / 2 + yO, size + 1);

  int ladderPos = xO + rand() % size;
  {
    for (int y = yO; y < mapSize; ++y)
      if (y < yO + size || mapTiles[ladderPos][y] == TileId::Empty)
	mapTiles[ladderPos][y] = TileId::UpClosedWall;
      else
	goto end_ladder;
  end_ladder:
    ;
  }
  if (size > 10)
    {
      int wallPos = xO + size / 4 + (rand() % (size / 2));
      if (std::abs(wallPos - ladderPos) > size / 4)
	{
	  for (int y = yO; y < mapSize; ++y)
	    if ((rand() & 3) && (y < yO + size / 2 || mapTiles[wallPos][y] == TileId::Empty))
	      mapTiles[wallPos][y] = ladderPos > wallPos ? TileId::RightClosedWall : TileId::LeftClosedWall;
	    else
	      goto end_wall;
	end_wall:
	  ;
	}
    }
}

void MapManager::initProcGenMap()
{
  mapTiles.resize(mapSize);
  for (auto &line : mapTiles)
    line.resize(mapSize, TileId::Wall);

  generateRoom(1, 1, 3);
}

void MapManager::initTestMap()
{
  std::vector<std::string> fakeMap;
  fakeMap.push_back("1111111111111111111111111111111111111111");
  fakeMap.push_back("2000000000050000000000000000000000000003");
  fakeMap.push_back("2000000000050000000000000000000000000003");
  fakeMap.push_back("2000000000050000000000000000000000000003");
  fakeMap.push_back("2000000000050000000000000000000000000003");
  fakeMap.push_back("2000000000050204440000000000000000000003");
  fakeMap.push_back("2200000000050204440000000000000000000003");
  fakeMap.push_back("2200000000000200040000000000000000000003");
  fakeMap.push_back("2000000000000200040000000000000000000003");
  fakeMap.push_back("2000000000000200040000000000000000000003");
  fakeMap.push_back("2400000000000200040000000000000000000003");
  fakeMap.push_back("2400000000000200040000000000000000000003");
  fakeMap.push_back("2400000000000200000000000000000000000003");
  fakeMap.push_back("2400000000000200000000000000000000000003");
  fakeMap.push_back("2666660000000200000000000000000000000003");
  fakeMap.push_back("2000000000000200000000000000000000000003");
  fakeMap.push_back("2444444404444400000000000000000000000003");
  fakeMap.push_back("2444444404444400000000000000000000000003");
  fakeMap.push_back("2000000400000200000000000000000000000003");
  fakeMap.push_back("2000000400000200000000000000000000000003");
  fakeMap.push_back("2000000004000200000000000000000000000003");
  fakeMap.push_back("2444000004000200000000000000000000000003");
  fakeMap.push_back("2444000004000200000000000000000000000003");
  fakeMap.push_back("2000000004000200000000000000000000000003");
  fakeMap.push_back("2000000004000200000000000000000000000003");
  fakeMap.push_back("2777777000000200000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2004000000000000000000000000000000000003");
  fakeMap.push_back("2004000000000000000000000000000000000003");
  fakeMap.push_back("2004000000000000000000000000000000000003");
  fakeMap.push_back("2004000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("1111111111111111111111111111111111111111");
  mapTiles.resize(fakeMap.size());
  for (unsigned i = 0 ; i < fakeMap.size() ; ++i)
    for (unsigned j = 0 ; j < fakeMap[i].size() ; ++j)
      mapTiles[i].push_back(TileId(fakeMap[i][j] - '0'));
}

TileId MapManager::getTile(claws::vect<unsigned int, 2u> pos) const noexcept
{
  if (pos[0] >= mapTiles.size() || pos[1] >= mapTiles[pos[0]].size())
    return TileId::Wall;
  else
    return mapTiles[pos[0]][pos[1]];
}

void MapManager::setMapPosition(claws::vect<int, 2> const &position)
{
  this->position = position;
}

void MapManager::fillDisplayData(claws::vect<int, 2> &mapOffset, claws::vect<int, 2> const &mapSize, std::vector<TileId> &drawMap) const
{
  mapOffset = position - mapSize / 2 - 1;
  drawMap.resize(mapSize[0] * mapSize[1]);
  for (unsigned i = mapOffset[0] ; i != mapOffset[0] + mapSize[0]; ++i)
    for (unsigned j = mapOffset[1] ; j != mapOffset[1] + mapSize[1]; ++j)
      drawMap[i - mapOffset[0] + mapSize[0] * (j - mapOffset[1])] = getTile({i, j});
}
