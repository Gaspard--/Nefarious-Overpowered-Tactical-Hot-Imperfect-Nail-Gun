# include "MapManager.hpp"
# include <cmath>

MapManager::MapManager(claws::vect<float, 2> const &winSize)
  : winSize(winSize)
{
  generateChunk(0, winSize[0] / tileSize * 2, winSize[1] / tileSize * 2, 0);
  initTestMap();
}

void MapManager::initTestMap()
{
  std::vector<std::string> fakeMap;
  fakeMap.push_back("1111111111111111111111111111111111111111");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("1200000000000000000000000000000000000003");
  fakeMap.push_back("1200000000000000000000000000000000000003");
  fakeMap.push_back("1200000000000000000000000000000000000003");
  fakeMap.push_back("1100000000000000040000000000000000000003");
  fakeMap.push_back("1100000000000000000000000000000000000003");
  fakeMap.push_back("1100000000000000050000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000060000000000000000000003");
  fakeMap.push_back("2400000000000000000000000000000000000003");
  fakeMap.push_back("2400000000000000070000000000000000000003");
  fakeMap.push_back("2400000000000000000000000000000000000003");
  fakeMap.push_back("2400000000000000000000000000000000000003");
  fakeMap.push_back("2666660000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2444444000000000000000000000000000000003");
  fakeMap.push_back("2444444000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2777770000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("2000000000000000000000000000000000000003");
  fakeMap.push_back("1111111111111111111111111111111111111111");
  mapTiles.resize(fakeMap.size());
  for (unsigned i = 0 ; i < fakeMap.size() ; ++i)
    for (unsigned j = 0 ; j < fakeMap[i].size() ; ++j)
      mapTiles[i].push_back(TileId(fakeMap[i][j] - '0'));
}

TileId MapManager::getTile(claws::vect<unsigned int, 2u> pos) const noexcept
{
  if (pos[0] >= mapTiles.size() || pos[1] >= mapTiles[pos[0]].size())
    return TileId::Wall;
  else
    return mapTiles[pos[0]][pos[1]];
}

void MapManager::setMapPosition(claws::vect<int, 2> const &position)
{
  this->position = position;
  if (position[0] + winSize[0] / tileSize > mapTiles[0].size())
    generateChunk(0, winSize[0] / tileSize * 2, 0, 0);
  else if (position[0] < 0)
    generateChunk(winSize[0] / tileSize * 2, 0, 0, 0);
  if (position[1] + winSize[1] / tileSize > mapTiles[1].size())
    generateChunk(0, 0, winSize[1] / tileSize * 2, 0);
  else if (position[1] < 0)
    generateChunk(0, 0, 0, winSize[1] / tileSize * 2);
}

void MapManager::generateChunk(uint32_t leftExp, uint32_t rightExp, uint32_t upExp, uint32_t downExp)
{
  (void)leftExp;
  (void)rightExp;
  (void)upExp;
  (void)downExp;
  //
  // map gen
  //
}

void MapManager::fillDisplayData(claws::vect<int, 2> &mapOffset, claws::vect<int, 2> const &mapSize, std::vector<TileId> &drawMap) const
{
  mapOffset = position - mapSize / 2 - 1;
  drawMap.resize(mapSize[0] * mapSize[1]);
  for (unsigned i = mapOffset[0] ; i != mapOffset[0] + mapSize[0]; ++i)
    for (unsigned j = mapOffset[1] ; j != mapOffset[1] + mapSize[1]; ++j)
      drawMap[i - mapOffset[0] + mapSize[0] * (j - mapOffset[1])] = getTile({i, j});
}
